/**
 * @file ThreadTestActivity
 * 
 * @brief APP main Activity 
 * 
 * manager the VR, TTS , Data , ConServer module 
 * make voice question to an answer
 * 
 * @author zhuxiaolin
 *
 */
package thread.Test;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import com.baidu.speechsynthesizer.SpeechSynthesizer;
import com.baidu.speechsynthesizer.SpeechSynthesizerListener;
import com.baidu.speechsynthesizer.publicutility.SpeechError;
import com.baidu.voicerecognition.android.VoiceRecognitionClient;

import android.R.bool;
import android.R.integer;
import android.R.layout;
import android.app.Activity;
import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ResolveInfo;
import android.database.Cursor;
import android.media.AudioManager;
import android.net.ConnectivityManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.provider.ContactsContract;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import thread.Model.L_XMLMsg;
import thread.Data.DataThread;
import thread.VR.PSETTelliVoiceRecognitioner;
import thread.pSrc.URLMsg;
import thread.pSrc.p_main;

/**
 * @brief Main activity
 * 
 *        control every module
 * 
 * @author zhuxiaolin
 * 
 */
public class ThreadTestActivity extends Activity implements OnClickListener,
		SpeechSynthesizerListener {

	// ////////////////////////////////////////////////////////////

	private String TAG = "MainThread";
	private boolean isRecognition = false; // / VR ing
	
	// ////// UI ////////////////
	private Button sendButton = null; // / text input button
	private AutoCompleteTextView contentEditText = null; // / autoCompleteView
	private ListView chatListView = null; // / chat list
	private List<ChatEntity> chatList = null;
	private TwoAdapter chatAdapter = null; // / two adapter for listView

	private Button cancelBtn; // / cancel vr button

	private static final int POWER_UPDATE_INTERVAL = 100; // / voice interval

	// 定义提示对话框
	private RoundProgressBar mVolumeBar;
	private Dialog dialog;
	private TextView dialogstatus;
	private ProgressBar mWaitBar;
	private TextView volumetextview;

	// ////// VR ////////////
	private Button btnBegin; // / begin VR button
	private PSETTelliVoiceRecognitioner vr = new PSETTelliVoiceRecognitioner(); // /
																				// VR
																				// class
	private static String result; // / VR转换后的结果

	// ///// TTS ////////////
	private SpeechSynthesizer speechSynthesizer; // / tts
	private static int ret; // / ret for TTS

	// ////// ConServer /////////////
	private URLMsg tMsg = new URLMsg(); // / vr result --- server --> URL
	private p_main p_server = new p_main(); // / Server Thread
	private static String sid; // the unique sid for one dialog

	// //// Data ////////////
	private DataThread dataThread = new DataThread(); // / data phrase
	private L_XMLMsg l_msg; // / Linbing XML ---data ---> stract
	private static String XmlString; // / XML string for data phrase

	// //// APP ////
	private static ArrayList<String> apps = new ArrayList<String>(); /// all app name
	private static ArrayList<String> openApps = new ArrayList<String>(); /// 
	private static String autoStr; // / autoCompleteString

	private RelativeLayout screen;
	
	/**
	 * 音量更新任务
	 */
	private Runnable mUpdateVolume = new Runnable() {
		public void run() {
			if (isRecognition) {
				long vol = Constraints.mASREngine.getCurrentDBLevelMeter();
				volumeChange((int) vol);
				Constraints.handler.removeCallbacks(mUpdateVolume);
				Constraints.handler.postDelayed(mUpdateVolume,
						POWER_UPDATE_INTERVAL);
			}
		}
	};

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);

		// ///// VR ////////////
		btnBegin = (Button) findViewById(R.id.beginBtn);
		btnBegin.setOnClickListener(ThreadTestActivity.this);

		Constraints.mASREngine = VoiceRecognitionClient.getInstance(this);
		Constraints.mASREngine.setTokenApis(Constraints.API_KEY,
				Constraints.SECRET_KEY);

		// /////// TTS //////////
		speechSynthesizer = new SpeechSynthesizer(getApplicationContext(),
				"holder", this);
		speechSynthesizer
				.setApiKey(Constraints.API_KEY, Constraints.SECRET_KEY);
		speechSynthesizer.setAudioStreamType(AudioManager.STREAM_MUSIC);
		setVolumeControlStream(AudioManager.STREAM_MUSIC);
		setParams(); // TTS　parameter

		// /////// UI ///////////
		contentEditText = (AutoCompleteTextView) this
				.findViewById(R.id.autoCompleteTextView1);
		sendButton = (Button) this.findViewById(R.id.sendBtn); /// 文字input button
		sendButton.setOnClickListener(ThreadTestActivity.this);

		chatListView = (ListView) this.findViewById(R.id.listView1); /// chat List View 
		chatList = new ArrayList<ChatEntity>(); // 最好用成气泡的，可以不要图标。

		chatAdapter = new TwoAdapter(this, chatList);
		chatListView.setAdapter(chatAdapter);
		
		screen= (RelativeLayout) findViewById(R.id.screen);
        screen.setOnClickListener(this);
//        chatListView.setOnClickListener(this);

		//// dialog //////
		/// 创建对话框
		dialog = new Dialog(ThreadTestActivity.this, R.style.MyDialog);
		dialog.setContentView(R.layout.dialog);
		dialog.setTitle("Custom Dialog");
		cancelBtn = (Button) dialog.findViewById(R.id.dialog_button_cancel);
		cancelBtn.setOnClickListener(ThreadTestActivity.this);

		mVolumeBar = (RoundProgressBar) dialog.findViewById(R.id.volumeProgressbar);
		dialogstatus = (TextView) dialog
				.findViewById(R.id.dialog_status_TextView);
		mWaitBar = (ProgressBar) dialog.findViewById(R.id.waitProgressbar);
		volumetextview = (TextView) dialog.findViewById(R.id.volumeTextView);
		
		// ///// start app //////////
		getList(); // get App name
		getAllCallRecords(this);

		// ///// main Handler /////////////////
		Constraints.handler = new Handler() {
			@Override
			public void handleMessage(Message msg) {
				switch (msg.what) {
				// ///// VR handler ///////////////
				case Constraints.RECOGNITION_IS_READY:
					// 提示用户可以开始说话 // 这个时候应该说出来
//					send(getString(R.string.please_speak), true);
					dialog.show();
					dialogstatus.setText(R.string.please_speak);
					isRecognition = true;
					SetVolumeBarVisiblity(true);
					Constraints.handler.removeCallbacks(mUpdateVolume);
					Constraints.handler.postDelayed(mUpdateVolume,
							POWER_UPDATE_INTERVAL);
					break;
				case Constraints.RECOGNITION_SPEECH_START:
					// 提示说话中 //这个时候应该 Dialog
					dialogstatus.setText(R.string.speaking);
//					send(getString(R.string.speaking), true);
					break;
				case Constraints.RECOGNITION_SPEECH_END:
					// 提示识别中，请等待结果 // 这个时候应该转圈圈 (或者用户自己决定结束）
					dialogstatus.setText(R.string.in_recog);
					isRecognition = false;
					SetVolumeBarVisiblity(false);
					SetWaitBarVisiblity(true);
//					send(getString(R.string.in_recog), true);
					break;
				case Constraints.RECOGNITION_RECOGNITION_FINISH:
					// 提示识别完成，并显示识别结果 // 这个时候应该显示结果，传给Server
					dialogstatus.setText(R.string.finished);
					SetWaitBarVisiblity(false);
					dialog.dismiss();
					result = (String) (msg.obj);
					send(result, false);
					if (equalApp(result)) {
					} 
					else {
						XmlString = serverVR(p_server, result, sid);
						dataPhrase(XmlString);
					}
					break;
				case Constraints.RECOGNITION_RECOGNITION_PARTIALFINISH:
					// 提示识别中，并显示识别结果 (部分结束）
					// send(result, false);
					break;
				case Constraints.RECOGNITION_RECOGNITION_CANCELED:
					// 提示取消成功，请重新开始
					SetWaitBarVisiblity(false);
					dialog.dismiss();
					// 刷新取消按键状态
					cancelBtn.setEnabled(false);
					send(getString(R.string.is_canceled), true);
					ret = speechSynthesizer
							.speak(getString(R.string.is_canceled));
					if (ret != 0) {
						// 显示错误信息
					}
					break;
				default:
					break;
				}
			}

		};
		
		// test for delete [] 
//		Pattern pattern = Pattern.compile("\\[.+?\\]");
//		Matcher matcher = pattern.matcher("[ddd]***[abcd].an4.[.sjn2]");
//		String string = matcher.replaceAll("");
//		System.out.println(string);
//		Toast.makeText(this, string, Toast.LENGTH_SHORT).show();
		
		// list view click
//		chatAdapter.onItemClick(this, chatListView, position, id);
//	      chatListView.setFocusable(true);
//	      chatListView.requestFocusFromTouch();
//		chatListView.setOnItemClickListener(new OnItemClickListener() {
//
//			@Override
//			public void onItemClick(AdapterView<?> arg0, View arg1, int positon,
//					long id) {
//				switch(positon){
//					case 0:
//						Toast.makeText(getApplicationContext(),  
//								" list click ", Toast.LENGTH_SHORT).show();  
//						break;
//					case 1:
//						Toast.makeText(getApplicationContext(),  
//								" list click ", Toast.LENGTH_SHORT).show();  
//						break;
//					default:
//						Toast.makeText(getApplicationContext(),  
//								" list click ", Toast.LENGTH_SHORT).show();  
//						break;
//				}
//				Toast.makeText(getApplicationContext(),  
//						" list click ", Toast.LENGTH_SHORT).show();
//			}
//		});
		
		for (Iterator<String> i = hashmap.keySet().iterator(); i.hasNext();) {
			String appName = i.next();
			apps.add(appName);
			apps.add("打开" + appName);
		}
		for (Iterator<String> i = mContacts.keySet().iterator(); i.hasNext();) {
			String contact = i.next();
			apps.add("打电话给" + contact);
		}
		
		ArrayAdapter<String> appAdapter = new ArrayAdapter<String>(
				ThreadTestActivity.this,
				android.R.layout.simple_dropdown_item_1line, apps);
		contentEditText.setAdapter(appAdapter);

		/// discharge is connected to network
		if(isConnectedNet()){ // has network
			//执行相关操作  
			vr.start();  /// VR begin
			XmlString = serverStart(p_server); /// 打开软件就和Server交互
			if (XmlString != null) {
				dataPhrase(XmlString);
			}
		}
	}
	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.screen: 
			InputMethodManager imm = (InputMethodManager) this
					.getSystemService(Context.INPUT_METHOD_SERVICE);
			contentEditText.setCursorVisible(false);// 失去光标
			imm.hideSoftInputFromWindow(v.getWindowToken(), 0);
			break;
		// / begin VR
		case R.id.beginBtn:			
			if(isConnectedNet()){
//				dialog.show();
				if (Constraints.mVoiceRecognitionerHandler != null) {
					// 通知子线程发起识别
					Message toVoiceRecognitioner = Constraints.mVoiceRecognitionerHandler
							.obtainMessage();
					toVoiceRecognitioner.what = Constraints.USER_START_SPEECH;
					Constraints.mVoiceRecognitionerHandler
							.sendMessage(toVoiceRecognitioner);
				}
			}
			break;
		// / end the VR
		case R.id.dialog_button_cancel:
			if (Constraints.mVoiceRecognitionerHandler != null) {
				// 通知子线程取消识别
				Message toVoiceRecognitioner = Constraints.mVoiceRecognitionerHandler
						.obtainMessage();
				toVoiceRecognitioner.what = Constraints.USER_CANCEL_SPEECH;
				Constraints.mVoiceRecognitionerHandler
						.sendMessage(toVoiceRecognitioner);
			}
			break;
		// / text input Button
		case R.id.sendBtn:
			autoStr = contentEditText.getText().toString();
			Log.d(TAG, "打开" + autoStr);
			if(!autoStr.isEmpty()){
			if (equalApp(autoStr)) {
				contentEditText.setText("");
			} else {
				send(autoStr, false);
				if(isConnectedNet()){ // has network
					//执行相关操作  
					XmlString = serverVR(p_server, autoStr, sid);
					dataPhrase(XmlString);
				}
				contentEditText.setText("");
			}
			}
			else{
				send("请输入内容。",true);
			}
		default:
			break;
		}
	}

	/**
	 * is connected to network
	 */
	private boolean isConnectedNet(){
		ConnectivityManager con=(ConnectivityManager)getSystemService(Activity.CONNECTIVITY_SERVICE);  
		boolean wifi=con.getNetworkInfo(ConnectivityManager.TYPE_WIFI).isConnectedOrConnecting();  
		boolean internet=con.getNetworkInfo(ConnectivityManager.TYPE_MOBILE).isConnectedOrConnecting();  
		if(wifi|internet){  
		    //执行相关操作  
			return true;
		}else{  
			send("亲，网络连了么？",true);  
		    return false;
		} 
	}
	
	/**
	 * connect volume and progress
	 * 
	 * @param power
	 *            volume num
	 */
	public void volumeChange(int power) {
		mVolumeBar.setProgress(power);
	}

	/*
	 * set the status of waiter bar
	 */
	public void SetWaitBarVisiblity(boolean flag) {
		if (true == flag) {
			mWaitBar.setVisibility(View.VISIBLE);
		} else {
			mWaitBar.setVisibility(View.GONE);
		}
	}

	/**
	 * set volume bar visible
	 * 
	 * @param flag
	 */
	public void SetVolumeBarVisiblity(boolean flag) {
		if (true == flag) {
			volumetextview.setVisibility(View.VISIBLE);
			mVolumeBar.setVisibility(View.VISIBLE);
		} else {
			volumetextview.setVisibility(View.GONE);
			mVolumeBar.setVisibility(View.GONE);
		}
	}

	/**
	 * charge the result is equal to the set String like appname and phoneName
	 * 
	 * @param Result
	 *            : vr result
	 * @return true, false
	 */
	private boolean equalApp(String Result) {
		int app_flag = 0;
		if(Result.endsWith("。")){
			Result = Result.substring(0, Result.length() -1);
		}
		for (Iterator<String> i = hashmap.keySet().iterator(); i.hasNext();) {
			String appName = i.next();
//			System.out.println("打开" + appName);
			if (Result.equals(appName)) {
				send("打开" + appName, false);
				startApp(appName);
				app_flag = 1;
				return true;
			} 
			else if (Result.startsWith("打开")) {
				if (Result.equals("打开" + appName)) {
					send("打开" + appName, false);
					startApp(appName);
					app_flag = 1;
					return true;
				} 
			}
		}
		int phone_flag = 0;
		for (Iterator<String> i = mContacts.keySet().iterator(); i.hasNext();) {
			String phoneName = i.next();
//			System.out.println("打电话给" + phoneName);
			if (Result.equals(phoneName)) {
				send("打电话给" + phoneName, false);
				dialPhone(phoneName);
				phone_flag = 1;
				return true;
			} else if (Result.startsWith("打电话")) {
				if (Result.equals("打电话给" + phoneName)) {
					send("打电话给" + phoneName, false);
					dialPhone(phoneName);
					phone_flag = 1;
					return true;
				} 
			}
		}
//		if (app_flag == 0) {
//			send(Result.substring(2, Result.length())
//					+ "软件不存在，请重新输入。", false);
//			app_flag = 1;
//		}
//		if (phone_flag == 0) {
//			send(Result.substring(4, Result.length())
//					+ "联系人不存在，请重新输入。", false);
//			phone_flag = 1;
//		}
		return false;
	}

	/**
	 * dial phone num by name
	 * 
	 * @param phoneName
	 *            : the phone name
	 */
	private void dialPhone(String phoneName) {
		// 调用系统方法拨打电话
		if (mContacts.containsKey(phoneName)) {
			Intent dialIntent = new Intent(Intent.ACTION_CALL, Uri.parse("tel:"
					+ mContacts.get(phoneName)));
			startActivity(dialIntent);
		} else {
			send("电话号码中没有" + phoneName, false);
		}
	}

	private static HashMap<String, String> mContacts = new HashMap<String, String>();

	/**
	 * 得到手机通讯录联系人信息
	 */
	public static void getAllCallRecords(Context context) { 
//		HashMap<String,String> temp = new HashMap<String, String>(); 
        Cursor c = context.getContentResolver().query( 
                ContactsContract.Contacts.CONTENT_URI, 
                null, 
                null, 
                null, 
                ContactsContract.Contacts.DISPLAY_NAME 
                        + " COLLATE LOCALIZED ASC"); 
        if (c.moveToFirst()) { 
            do { 
                // 获得联系人的ID号 
                String contactId = c.getString(c 
                        .getColumnIndex(ContactsContract.Contacts._ID)); 
                // 获得联系人姓名 
                String name = c 
                        .getString(c 
                                .getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME)); 
                // 查看该联系人有多少个电话号码。如果没有这返回值为0 
                int phoneCount = c 
                        .getInt(c 
                                .getColumnIndex(ContactsContract.Contacts.HAS_PHONE_NUMBER)); 
                String number=null; 
                if (phoneCount > 0) { 
                    // 获得联系人的电话号码 
                    Cursor phones = context.getContentResolver().query( 
                            ContactsContract.CommonDataKinds.Phone.CONTENT_URI, 
                            null, 
                            ContactsContract.CommonDataKinds.Phone.CONTACT_ID 
                                    + " = " + contactId, null, null); 
                    if (phones.moveToFirst()) { 
                        number = phones 
                                .getString(phones 
                                .getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER)); 
                        } 
                    phones.close(); 
                } 
                mContacts.put(name, number); 
            } while (c.moveToNext()); 
        } 
        c.close();  
    }
	
	private static int server_flag = 0; // / the server flag for did increase

	/**
	 * begin a ConServer (dialog)
	 * 
	 * @param pMain
	 *            : a Conserver Class
	 * @return
	 */
	private String serverStart(p_main pMain) {
		// 通知子线程发起识别
		Log.d(TAG, " server start ");
		tMsg.setMsg_Flag("p_start");
		tMsg.setMsg_DID("0");

		String xmlString = pMain.doTask(tMsg);
		return xmlString;
	}

	/**
	 * end a Conserver
	 * 
	 * @param pMain
	 *            : a conserver class
	 * @param sid
	 *            : a unique id for a dialog
	 * @return
	 */
	private String serverEnd(p_main pMain, String sid) {
		tMsg.setMsg_Flag("p_stop");
		server_flag = server_flag + 1;
		tMsg.setMsg_SID(sid);
		tMsg.setMsg_DID(String.valueOf(server_flag));

		String xmlString = pMain.doTask(tMsg);
		server_flag = 0;
		return xmlString;
	}

	/**
	 * conserver
	 * 
	 * @param pMain
	 *            a conserver class
	 * @param str
	 *            : a question
	 * @param sid
	 *            : id
	 * @return a XML answer from server
	 */
	private String serverVR(p_main pMain, String str, String sid) {
		// 通知子线程发起识别
		Log.d(TAG, " server vr ");
		server_flag = server_flag + 1;
		tMsg.setMsg_Flag("p_vr");
		tMsg.setMsg_STT(str);
		tMsg.setMsg_SID(sid);
		tMsg.setMsg_DID(String.valueOf(server_flag));
		String xmlString = pMain.doTask(tMsg);
		return xmlString;
	}

	/**
	 * phrase XML Data
	 * 
	 * @param xmlString
	 *            :a XML data From Conserver
	 */
	private void dataPhrase(String xmlString) {
		l_msg = dataThread.parseXml(xmlString);
		if (l_msg.getSid() != null) {
			sid = l_msg.getSid();
			Log.d(TAG, sid);
		}
		if (l_msg.getTts() != null || l_msg.getDisplay() != null) { // 两者有一不为空
			if (l_msg.getDisplay() == null) { // 当显示为空
				send(l_msg.getTts(), true);
				ret = speechSynthesizer.speak(l_msg.getTts());
				if (ret != 0) {
					// 显示错误信息
				}
			} else if (l_msg.getTts() == null) { // 当TTS为空
				send(l_msg.getDisplay(), true);
			} else {
				send(l_msg.getDisplay(), true);
				ret = speechSynthesizer.speak(l_msg.getTts());
				if (ret != 0) {
					// 显示错误信息
				}
			}
		} else {
			Log.d(TAG, "data from Data model is null");
		}
		if (l_msg.getAppName() != null) {
			startApp(l_msg.getAppName());
			Log.d(TAG, "end server ");
			serverEnd(p_server, sid);
			serverStart(p_server);
		}
	}

	/**
	 * send message to Chat ListView
	 * 
	 * @param str
	 *            :message
	 * @param isComeMsg
	 *            :diacharge the message
	 */
	private void send(String str, boolean isComeMsg) { // !!!! the main point
		ChatEntity chatEntity = new ChatEntity();
		// get current data
		SimpleDateFormat sDateFormat = new SimpleDateFormat(
				"yyyy-MM-dd   hh:mm:ss");
		String date = sDateFormat.format(new java.util.Date());

		chatEntity.setChatTime(date);
		chatEntity.setContent(str);
		chatEntity.setComeMsg(isComeMsg);
		chatList.add(chatEntity);
		chatAdapter.notifyDataSetChanged(); // refresh data
		chatListView.setSelection(chatList.size() - 1);
	}

	// /////// start APP ///////////

	private List<ResolveInfo> mApps; // / list of app
	private static HashMap hashmap = new HashMap(); // / a hashmap for appName
													// and packageName
	private ResolveInfo info;

	/**
	 * Start a App with it's name
	 * 
	 * @param Appname
	 *            : an app name
	 */
	public void startApp(String Appname) {
		// TODO Auto-generated method stub
		String PacStr = hashmap.get(Appname).toString();
		// Log.d("package name", PacStr);
		if (Appname != null) {
			startOtherApp(PacStr);
		}
	}

	/**
	 * get all the APP Name list
	 */
	private void getList() {
		// list.clear();
		Intent mainIntent = new Intent(Intent.ACTION_MAIN, null);
		mainIntent.addCategory(Intent.CATEGORY_LAUNCHER);
		mApps = getPackageManager().queryIntentActivities(mainIntent, 0);
		for (int i = 0; i < mApps.size(); i++) {
			info = mApps.get(i);
			String appLabel = info.loadLabel(getPackageManager()).toString();
			String packagename = info.activityInfo.packageName;
			String appname = info.activityInfo.name;
			hashmap.put(appLabel.toLowerCase(), packagename);
		}
	}

	/**
	 * start an app by package Name
	 * 
	 * @param AppPackageStr
	 */
	private void startOtherApp(String AppPackageStr) {
		Log.d("app", "begin app");
		Intent LaunchIntent = getPackageManager().getLaunchIntentForPackage(
				AppPackageStr);
		startActivity(LaunchIntent);
	}

	/**
	 * TTS set
	 */
	private void setParams() {
		speechSynthesizer.setParam(SpeechSynthesizer.PARAM_SPEAKER, "1");
		speechSynthesizer.setParam(SpeechSynthesizer.PARAM_VOLUME, "5");
		speechSynthesizer.setParam(SpeechSynthesizer.PARAM_SPEED, "5");
		speechSynthesizer.setParam(SpeechSynthesizer.PARAM_PITCH, "5");
		speechSynthesizer.setParam(SpeechSynthesizer.PARAM_AUDIO_ENCODE, "1");
		speechSynthesizer.setParam(SpeechSynthesizer.PARAM_AUDIO_RATE, "4");
	}

	@Override
	public void onStartWorking(SpeechSynthesizer synthesizer) {
		// logDebug("开始工作，请等待数据...");
	}

	@Override
	public void onSpeechStart(SpeechSynthesizer synthesizer) {
		// logDebug("朗读开始");
	}

	@Override
	public void onSpeechResume(SpeechSynthesizer synthesizer) {
		// logDebug("朗读继续");
	}

	@Override
	public void onSpeechProgressChanged(SpeechSynthesizer synthesizer,
			int progress) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onSpeechPause(SpeechSynthesizer synthesizer) {
		// logDebug("朗读已暂停");
	}

	@Override
	public void onSpeechFinish(SpeechSynthesizer synthesizer) {
		// logDebug("朗读已停止");
	}

	@Override
	public void onNewDataArrive(SpeechSynthesizer synthesizer,
			byte[] dataBuffer, int dataLength) {
		// logDebug("新的音频数据：" + dataLength);
	}

	@Override
	public void onError(SpeechSynthesizer synthesizer, SpeechError error) {
		// logError("发生错误：" + error.errorDescription + "(" + error.errorCode +
		// ")");
	}

	@Override
	public void onCancel(SpeechSynthesizer synthesizer) {
		// logDebug("已取消");
	}

	@Override
	public void onBufferProgressChanged(SpeechSynthesizer synthesizer,
			int progress) {
		// TODO Auto-generated method stub

	}

}