package com.PSETTelli;

import android.app.Activity;
import android.os.Handler;
import android.os.Message;
import android.os.Looper;
import android.support.v4.app.FragmentActivity;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Button;
import android.widget.Toast;
import android.view.View.OnClickListener;
import android.view.View;
import android.view.ViewGroup;
import android.util.Log;

//import com.baidu.tts.sample.R;
import com.baidu.voicerecognition.android.Candidate;
import com.baidu.voicerecognition.android.DataUploader;
import com.baidu.voicerecognition.android.VoiceRecognitionClient;
import com.baidu.voicerecognition.android.VoiceRecognitionClient.VoiceClientStatusChangeListener;
import com.baidu.voicerecognition.android.VoiceRecognitionConfig;

import java.util.List;


public class PSETTelliActivity extends Activity implements OnClickListener{
	    protected static final String CLIENT_TAG = "client";
	    
	    //识别器发给客户端的消息类型定义
	    public static final int RECOGNITION_IS_READY = 0x1;

        public static final int RECOGNITION_SPEECH_START = 0x2;

        public static final int RECOGNITION_SPEECH_END = 0x3;

        public static final int RECOGNITION_RECOGNITION_FINISH = 0x4;
        
        public static final int RECOGNITION_RECOGNITION_PARTIALFINISH = 0x5;
        
        public static final int RECOGNITION_RECOGNITION_CANCELED = 0x6;
        
        public static final int RECOGNITION_RECOGNITION_ERROR = 0x7;
        
        //客户端发给识别器的消息类型定义
        public static final int USER_START_SPEECH = 0x8;
        
        public static final int USER_CANCEL_SPEECH = 0x9;
        
        
        
        public static  VoiceRecognitionClient mASREngine;

        
	    static public Handler mClientHandler;
	    static public Handler mVoiceRecognitionerHandler;
	    private TextView info;
		private EditText Result = null;
	    private Button startBtn;
		private Button cancelBtn;
		
	 
	    @Override
	    protected  void onCreate(android.os.Bundle savedInstanceState) {
	        super.onCreate(savedInstanceState);
	        setContentView(R.layout.main);
	        info = (TextView) findViewById(R.id.info);
			Result = (EditText) findViewById(R.id.Result);
	        startBtn = (Button) findViewById(R.id.startBtn);
	        startBtn.setOnClickListener(this);
	        cancelBtn = (Button) findViewById(R.id.cancelBtn);
	        cancelBtn.setOnClickListener(this);
	        
	        mASREngine = VoiceRecognitionClient.getInstance(this);
	        mASREngine.setTokenApis(Constants.API_KEY, Constants.SECRET_KEY);
	        
	        System.out.println("initialize view successfully!");
			
	        mClientHandler = new Handler() {
	 
//	            @Override
	            public void handleMessage(Message msg) {
	                switch(msg.what){
				    case RECOGNITION_IS_READY:
						// 提示用户可以开始说话
                       info.setText(R.string.please_speak);
                       System.out.println("receive notify that ASREngine is ready!");
                        break;
					case RECOGNITION_SPEECH_START:
						// 提示说话中
						info.setText(R.string.speaking);
						System.out.println("receive notify that user is speaking!");
                        break;
					case RECOGNITION_SPEECH_END:
						// 提示识别中，请等待结果
                        info.setText(R.string.in_recog);
                        System.out.println("receive notify that speaking is end!");
                        break;
					case RECOGNITION_RECOGNITION_FINISH:
						// 提示识别完成，并显示识别结果
						info.setText(R.string.finished);
						Result.setText((String)(msg.obj));
                        break;
					case RECOGNITION_RECOGNITION_PARTIALFINISH:
					    // 提示识别中，并显示识别结果
					    info.setText(R.string.in_recog);
					    Result.setText((String)(msg.obj));
                        break;
				    case RECOGNITION_RECOGNITION_CANCELED:
					    // 提示取消成功，请重新开始
					    info.setText(R.string.is_canceled);
					    //刷新取消按键状态
                        break;
                    default:
                        break;						
				    }
	            }
	 
	        };
	 
        	new PSETTelliVoiceRecognitioner().start(); 
	         
			
			System.out.println("onCreate is end!");
	    }
	    
	    @Override
	    public void onClick(View v) {
	        switch (v.getId()) {
	        case R.id.startBtn:
	        	cancelBtn.setEnabled(true);
	        	if (mVoiceRecognitionerHandler != null) {
                    //通知子线程发起识别
                    Message toVoiceRecognitioner = mVoiceRecognitionerHandler.obtainMessage();
                    toVoiceRecognitioner.what = USER_START_SPEECH;
                    mVoiceRecognitionerHandler.sendMessage(toVoiceRecognitioner);
                }
	            break;
	        case R.id.cancelBtn:
	        	if (mVoiceRecognitionerHandler != null) {
                    
                    //通知子线程取消识别
                    Message toVoiceRecognitioner = mVoiceRecognitionerHandler.obtainMessage();
                    toVoiceRecognitioner.what = USER_CANCEL_SPEECH;
                    mVoiceRecognitionerHandler.sendMessage(toVoiceRecognitioner);
                }
	            break;
	        default:
	            break;
	        }
	    }
	    
	    public void onStart() {
	    	super.onStart();
	    	System.out.println("onStart");
	    	
	    }
//	    
	    public void onReStart() {
	    	super.onRestart();
	    	System.out.println("onReStart");
	    }
	    
	    public void onResume() {
	    	super.onResume(); 
	    	System.out.println("onResume");
	    }
	    
	    public void onPause() {
	    	super.onPause(); 
	    	System.out.println("onPause");
	    }
	    
	    public void onStop() {
	    	super.onStop();
	    	System.out.println("onStop");
	    }
	    
	    public void onDestroy() {

	    	System.out.println("onDestroy");
	    	super.onDestroy();
	    }
	    
//	    public void onDestroy() {
//
//	        mVoiceRecognitionerHandler.getLooper().quit();
//	    }
	 
	    
	    
}