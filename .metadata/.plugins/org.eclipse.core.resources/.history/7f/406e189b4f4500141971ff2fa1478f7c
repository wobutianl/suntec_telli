package msg.GTD;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;

import msg.GTD.DBHelper.SqlInterface;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.Environment;
import android.sax.EndTextElementListener;
import android.util.Log;

public class GtdTable {
	// 表名
	public static final String TABLE_NAME = "GTDTable";
	// ID
	public static final String SMS_ID = "smsID";
	// start time
	public static final String START_TIME = "startTime";
	// end time
	public static final String END_TIME = "endTime";

	// GTD Place
	public static final String PLACE = "place";
	// GTD content
	public static final String CONTENT = "content";
	// GTD status(finish, canceled, delay, todo)
	public static final String GTDSTATUS = "gtdStatus";
	// GTD type (home, work, finish)
	public static final String GTDTYPE = "gtdType";
	// 时间
	public static final String ITEM_WRITTEN_MILLSECECOND = "MyDayRecordTableWrittenTime";

	// 创建语句
	private final String CREATE_SQL = "CREATE TABLE IF NOT EXISTS "
			+ TABLE_NAME + " ( " + SMS_ID
			+ " integer primary key autoincrement, " + START_TIME
			+ " varchar , " + END_TIME + " varchar , " + PLACE + " varchar , "
			+ CONTENT + " varchar not null , " + GTDSTATUS
			+ " varchar not null , " + GTDTYPE + " varchar not null , "
			+ ITEM_WRITTEN_MILLSECECOND + " bigint not null  ) ";

	// sqlhelper
	DBHelper helper = null;
	private SmsData sms = new SmsData();
	/**
	 * 构造方法
	 * 
	 * @param cxt
	 */
	public GtdTable(Context context) {
		helper = new DBHelper(context);
		// 如果表不存在
		if (!helper.isTableExits(TABLE_NAME)) {
			// 创建表
			helper.createTable(CREATE_SQL);
		}
	}

	@Override
	public long addData(ObjectMap<String, Object> om) {
		try {
			ContentValues values = new ContentValues();
			Log.d("SQL_ADD", GtdTable.TABLE_NAME + " ~~ " + om.toString());
			values.put(GtdTable.START_TIME,
					om.getStringValue(GtdTable.START_TIME));
			values.put(GtdTable.END_TIME, om.getStringValue(GtdTable.END_TIME));
			values.put(GtdTable.PLACE, om.getStringValue(GtdTable.PLACE));
			values.put(GtdTable.CONTENT, om.getStringValue(GtdTable.CONTENT));
			values.put(GtdTable.GTDSTATUS,
					om.getStringValue(GtdTable.GTDSTATUS));
			values.put(GtdTable.GTDTYPE, om.getStringValue(GtdTable.GTDTYPE));
			values.put(GtdTable.ITEM_WRITTEN_MILLSECECOND,
					om.getStringValue(GtdTable.ITEM_WRITTEN_MILLSECECOND));
			return helper.save(GtdTable.TABLE_NAME, values);
		} catch (Exception e) {
			Log.d("addData Exception", e.toString());
			e.printStackTrace();
			return -1;
		}
	}

	/**
	 * data follow by recordTime
	 */
	@Override
	public List<ObjectMap<String, Object>> retrieveData(
			ObjectMap<String, Object> om) {
		StringBuilder bd = new StringBuilder();
		bd.append("select * from ").append(GtdTable.TABLE_NAME)
				.append(" order by ")
				.append(GtdTable.ITEM_WRITTEN_MILLSECECOND).append(" desc");
		Log.d("SQL_RETRIEVE", bd.toString());

		Cursor cursor = helper.find(bd.toString(), null);
		List<ObjectMap<String, Object>> list = new ArrayList<ObjectMap<String, Object>>(
				cursor.getCount());

		while (cursor.moveToNext()) {
			ObjectMap<String, Object> _om = new ObjectMap<String, Object>();
			_om.put(GtdTable.START_TIME, cursor.getString(cursor
					.getColumnIndex(GtdTable.START_TIME)));
			_om.put(GtdTable.END_TIME,
					cursor.getString(cursor.getColumnIndex(GtdTable.END_TIME)));
			_om.put(GtdTable.PLACE,
					cursor.getString(cursor.getColumnIndex(GtdTable.PLACE)));
			_om.put(GtdTable.CONTENT,
					cursor.getString(cursor.getColumnIndex(GtdTable.CONTENT)));
			_om.put(GtdTable.GTDSTATUS,
					cursor.getString(cursor.getColumnIndex(GtdTable.GTDSTATUS)));
			_om.put(GtdTable.GTDTYPE,
					cursor.getString(cursor.getColumnIndex(GtdTable.GTDTYPE)));
			_om.put(GtdTable.ITEM_WRITTEN_MILLSECECOND, cursor.getLong(cursor
					.getColumnIndex(GtdTable.ITEM_WRITTEN_MILLSECECOND)));
			list.add(_om);
		}
		return list;
	}

	public boolean delData(HashMap<String, Object> om) {
		StringBuilder bd = new StringBuilder();
		bd.append(GtdTable.SMS_ID).append(" = ?");
		return helper.delete(GtdTable.TABLE_NAME, bd.toString(),
				new String[] { String.valueOf(om
						.getIntegerValue(GtdTable.SMS_ID)) });
	}

}
